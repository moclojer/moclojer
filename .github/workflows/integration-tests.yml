name: integration-tests

on: [push, pull_request]

jobs:
  integration-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup Clojure
        uses: DeLaGuardo/setup-clojure@13.1
        with:
          cli: "1.11.1.1139"
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.m2/repository
            ~/.gitlibs
            .cpcache
          key: ${{ runner.os }}-clojure-${{ hashFiles('**/deps.edn') }}
          restore-keys: |
            ${{ runner.os }}-clojure-

      - name: Run moclojer server for integration tests
        run: |
          # Start moclojer server in the background
          clojure -M:run -c ./test/com/moclojer/resources/moclojer.yml > moclojer.log 2>&1 &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV

          # Give it a moment to start up
          echo "Waiting for moclojer server to start..."
          sleep 10

          # Check if server is running
          if ! ps -p $SERVER_PID > /dev/null; then
            echo "❌ moclojer server failed to start. Check logs:"
            cat moclojer.log
            exit 1
          fi

          # Check if server is responding
          MAX_RETRIES=5
          RETRY_COUNT=0
          SERVER_READY=false

          while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$SERVER_READY" = false ]; do
            if curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/hello/testuser | grep -q "200"; then
              SERVER_READY=true
              echo "✅ moclojer server is up and running!"
            else
              echo "Waiting for server to be ready... (attempt $((RETRY_COUNT+1))/$MAX_RETRIES)"
              RETRY_COUNT=$((RETRY_COUNT+1))
              sleep 5
            fi
          done

          if [ "$SERVER_READY" = false ]; then
            echo "❌ moclojer server did not respond in time. Check logs:"
            cat moclojer.log
            exit 1
          fi

      - name: Run integration tests
        run: |
          # Test the /hello/:username endpoint
          echo "Testing /hello/:username endpoint..."
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/hello/testuser)
          echo "Status code: $RESPONSE"
          if [ "$RESPONSE" -eq 200 ]; then
            echo "✅ GET /hello/testuser returned 200 OK"
          else
            echo "❌ GET /hello/testuser failed with status $RESPONSE"
            exit 1
          fi

          # Test the response body
          echo "Testing response body..."
          BODY=$(curl -s http://localhost:8000/hello/testuser)
          EXPECTED_KEY="hello"
          EXPECTED_VALUE="testuser!"
          echo "Received body: $BODY"

          # Extract and compare values ignoring whitespace
          if echo "$BODY" | grep -q "\"$EXPECTED_KEY\":\"$EXPECTED_VALUE\""; then
            echo "✅ Response body contains expected key-value pair"
          else
            echo "❌ Response body does not contain expected key-value pair"
            echo "Expected key: $EXPECTED_KEY"
            echo "Expected value: $EXPECTED_VALUE"
            echo "Received: $BODY"
            exit 1
          fi

          # Skip rate limiting test for now as it may not be configured in the test file
          echo "Note: Skipping rate limiting test as it may not be configured in the test configuration file."
          echo "✅ Basic API functionality tests passed successfully"

          # Check if other endpoints from the test configuration are working
          echo "Testing additional endpoints from the configuration..."

          # Test /hello-world endpoint
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/hello-world)
          if [ "$RESPONSE" -eq 200 ]; then
            echo "✅ GET /hello-world returned 200 OK"
          else
            echo "❌ GET /hello-world failed with status $RESPONSE"
            exit 1
          fi

          # Test /v1/hello endpoint
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/v1/hello)
          if [ "$RESPONSE" -eq 200 ]; then
            echo "✅ GET /v1/hello returned 200 OK"
          else
            echo "❌ GET /v1/hello failed with status $RESPONSE"
            exit 1
          fi
        shell: /usr/bin/bash -e {0}

      - name: Cleanup
        if: always()
        run: |
          # Kill the moclojer server
          if [ -n "$SERVER_PID" ]; then
            echo "Stopping moclojer server (PID: $SERVER_PID)..."
            kill $SERVER_PID || true
          else
            pkill -f "clojure -M:run -c ./test/com/moclojer/resources/moclojer.yml" || true
          fi

          # Print server logs for debugging
          if [ -f "moclojer.log" ]; then
            echo "moclojer server logs:"
            cat moclojer.log
          fi
        shell: /usr/bin/bash -e {0}